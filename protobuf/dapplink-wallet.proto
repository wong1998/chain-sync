syntax = "proto3";
option go_package = "./protobuf/dal-wallet-go";
package syncs;

enum ReturnCode{
  ERROR = 0;
  SUCCESS = 1;
}

// type in (eoa hot cold)
message PublicKey{
  string type = 1;
  string public_key = 2;
}

// type in (eoa hot cold)
message Address{
  string type = 1;
  string address = 2;
}

message Token{
  uint32 decimals = 1;
  string address = 2;
  string token_name = 3;
  string collect_amount = 4;
  string cold_amount = 5;
}

message BusinessRegisterRequest{
  string  consumer_token = 1;
  string  request_id = 2;
  string  notify_url = 3;
}

message BusinessRegisterResponse{
  ReturnCode Code = 1;
  string Msg = 2;
}

message ExportAddressesRequest{
  string  consumer_token = 1;
  string request_id = 2;
  repeated PublicKey public_keys = 3;
}

message ExportAddressesResponse {
  ReturnCode Code = 1;
  string msg = 2;
  repeated Address addresses = 3;
}

message UnSignTransactionRequest {
  string consumer_token = 1;
  string request_id = 2;
  string chain_id = 3;
  string chain = 4;
  string from = 5;
  string to = 6;
  string value = 7;
  string contract_address = 8;
  string token_id = 9;
  string token_meta = 10;
  // database/constant.go:54
  // TransactionType
  string tx_type = 11;
}

message UnSignTransactionResponse {
  ReturnCode code = 1;
  string msg = 2;
  string transaction_id = 4;
  string un_sign_tx = 5;
}

message SignedTransactionRequest {
  string consumer_token = 1;
  string request_id = 2;
  string chain = 3;
  string chain_id = 4;
  string transaction_id = 5;
  string signature = 6;
  string tx_type = 7;
}

message SignedTransactionResponse {
  ReturnCode code = 1;
  string msg = 2;
  string signed_tx = 3;
}

message SetTokenAddressRequest{
  string request_id = 1;
  repeated Token token_list = 2;
}

message SetTokenAddressResponse {
  ReturnCode code = 1;
  string msg = 2;
}

service BusinessMiddleWireServices {
  rpc businessRegister(BusinessRegisterRequest) returns (BusinessRegisterResponse) {}
  rpc exportAddressesByPublicKeys(ExportAddressesRequest) returns (ExportAddressesResponse) {}
  rpc createUnSignTransaction(UnSignTransactionRequest) returns(UnSignTransactionResponse){}
  rpc buildSignedTransaction(SignedTransactionRequest) returns(SignedTransactionResponse){}
  rpc setTokenAddress(SetTokenAddressRequest) returns (SetTokenAddressResponse) {}
}