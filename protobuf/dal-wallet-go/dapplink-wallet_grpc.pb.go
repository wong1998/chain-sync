// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: dapplink-wallet.proto

package dal_wallet_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BusinessMiddleWireServices_BusinessRegister_FullMethodName            = "/syncs.BusinessMiddleWireServices/businessRegister"
	BusinessMiddleWireServices_ExportAddressesByPublicKeys_FullMethodName = "/syncs.BusinessMiddleWireServices/exportAddressesByPublicKeys"
	BusinessMiddleWireServices_CreateUnSignTransaction_FullMethodName     = "/syncs.BusinessMiddleWireServices/createUnSignTransaction"
	BusinessMiddleWireServices_BuildSignedTransaction_FullMethodName      = "/syncs.BusinessMiddleWireServices/buildSignedTransaction"
	BusinessMiddleWireServices_SetTokenAddress_FullMethodName             = "/syncs.BusinessMiddleWireServices/setTokenAddress"
)

// BusinessMiddleWireServicesClient is the client API for BusinessMiddleWireServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BusinessMiddleWireServicesClient interface {
	BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error)
	ExportAddressesByPublicKeys(ctx context.Context, in *ExportAddressesRequest, opts ...grpc.CallOption) (*ExportAddressesResponse, error)
	CreateUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error)
	BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error)
	SetTokenAddress(ctx context.Context, in *SetTokenAddressRequest, opts ...grpc.CallOption) (*SetTokenAddressResponse, error)
}

type businessMiddleWireServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewBusinessMiddleWireServicesClient(cc grpc.ClientConnInterface) BusinessMiddleWireServicesClient {
	return &businessMiddleWireServicesClient{cc}
}

func (c *businessMiddleWireServicesClient) BusinessRegister(ctx context.Context, in *BusinessRegisterRequest, opts ...grpc.CallOption) (*BusinessRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BusinessRegisterResponse)
	err := c.cc.Invoke(ctx, BusinessMiddleWireServices_BusinessRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessMiddleWireServicesClient) ExportAddressesByPublicKeys(ctx context.Context, in *ExportAddressesRequest, opts ...grpc.CallOption) (*ExportAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportAddressesResponse)
	err := c.cc.Invoke(ctx, BusinessMiddleWireServices_ExportAddressesByPublicKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessMiddleWireServicesClient) CreateUnSignTransaction(ctx context.Context, in *UnSignTransactionRequest, opts ...grpc.CallOption) (*UnSignTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnSignTransactionResponse)
	err := c.cc.Invoke(ctx, BusinessMiddleWireServices_CreateUnSignTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessMiddleWireServicesClient) BuildSignedTransaction(ctx context.Context, in *SignedTransactionRequest, opts ...grpc.CallOption) (*SignedTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignedTransactionResponse)
	err := c.cc.Invoke(ctx, BusinessMiddleWireServices_BuildSignedTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *businessMiddleWireServicesClient) SetTokenAddress(ctx context.Context, in *SetTokenAddressRequest, opts ...grpc.CallOption) (*SetTokenAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTokenAddressResponse)
	err := c.cc.Invoke(ctx, BusinessMiddleWireServices_SetTokenAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BusinessMiddleWireServicesServer is the server API for BusinessMiddleWireServices service.
// All implementations should embed UnimplementedBusinessMiddleWireServicesServer
// for forward compatibility.
type BusinessMiddleWireServicesServer interface {
	BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error)
	ExportAddressesByPublicKeys(context.Context, *ExportAddressesRequest) (*ExportAddressesResponse, error)
	CreateUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error)
	BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error)
	SetTokenAddress(context.Context, *SetTokenAddressRequest) (*SetTokenAddressResponse, error)
}

// UnimplementedBusinessMiddleWireServicesServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBusinessMiddleWireServicesServer struct{}

func (UnimplementedBusinessMiddleWireServicesServer) BusinessRegister(context.Context, *BusinessRegisterRequest) (*BusinessRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BusinessRegister not implemented")
}
func (UnimplementedBusinessMiddleWireServicesServer) ExportAddressesByPublicKeys(context.Context, *ExportAddressesRequest) (*ExportAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAddressesByPublicKeys not implemented")
}
func (UnimplementedBusinessMiddleWireServicesServer) CreateUnSignTransaction(context.Context, *UnSignTransactionRequest) (*UnSignTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnSignTransaction not implemented")
}
func (UnimplementedBusinessMiddleWireServicesServer) BuildSignedTransaction(context.Context, *SignedTransactionRequest) (*SignedTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSignedTransaction not implemented")
}
func (UnimplementedBusinessMiddleWireServicesServer) SetTokenAddress(context.Context, *SetTokenAddressRequest) (*SetTokenAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTokenAddress not implemented")
}
func (UnimplementedBusinessMiddleWireServicesServer) testEmbeddedByValue() {}

// UnsafeBusinessMiddleWireServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BusinessMiddleWireServicesServer will
// result in compilation errors.
type UnsafeBusinessMiddleWireServicesServer interface {
	mustEmbedUnimplementedBusinessMiddleWireServicesServer()
}

func RegisterBusinessMiddleWireServicesServer(s grpc.ServiceRegistrar, srv BusinessMiddleWireServicesServer) {
	// If the following call pancis, it indicates UnimplementedBusinessMiddleWireServicesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BusinessMiddleWireServices_ServiceDesc, srv)
}

func _BusinessMiddleWireServices_BusinessRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessMiddleWireServicesServer).BusinessRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessMiddleWireServices_BusinessRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessMiddleWireServicesServer).BusinessRegister(ctx, req.(*BusinessRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessMiddleWireServices_ExportAddressesByPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessMiddleWireServicesServer).ExportAddressesByPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessMiddleWireServices_ExportAddressesByPublicKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessMiddleWireServicesServer).ExportAddressesByPublicKeys(ctx, req.(*ExportAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessMiddleWireServices_CreateUnSignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSignTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessMiddleWireServicesServer).CreateUnSignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessMiddleWireServices_CreateUnSignTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessMiddleWireServicesServer).CreateUnSignTransaction(ctx, req.(*UnSignTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessMiddleWireServices_BuildSignedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessMiddleWireServicesServer).BuildSignedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessMiddleWireServices_BuildSignedTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessMiddleWireServicesServer).BuildSignedTransaction(ctx, req.(*SignedTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BusinessMiddleWireServices_SetTokenAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTokenAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BusinessMiddleWireServicesServer).SetTokenAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BusinessMiddleWireServices_SetTokenAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BusinessMiddleWireServicesServer).SetTokenAddress(ctx, req.(*SetTokenAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BusinessMiddleWireServices_ServiceDesc is the grpc.ServiceDesc for BusinessMiddleWireServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BusinessMiddleWireServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncs.BusinessMiddleWireServices",
	HandlerType: (*BusinessMiddleWireServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "businessRegister",
			Handler:    _BusinessMiddleWireServices_BusinessRegister_Handler,
		},
		{
			MethodName: "exportAddressesByPublicKeys",
			Handler:    _BusinessMiddleWireServices_ExportAddressesByPublicKeys_Handler,
		},
		{
			MethodName: "createUnSignTransaction",
			Handler:    _BusinessMiddleWireServices_CreateUnSignTransaction_Handler,
		},
		{
			MethodName: "buildSignedTransaction",
			Handler:    _BusinessMiddleWireServices_BuildSignedTransaction_Handler,
		},
		{
			MethodName: "setTokenAddress",
			Handler:    _BusinessMiddleWireServices_SetTokenAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dapplink-wallet.proto",
}
